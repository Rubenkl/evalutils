import SimpleITK

from evalutils import BaseProcess
from evalutils.io import SimpleITKLoader
from evalutils.validators import (
    UniquePathIndicesValidator, UniqueImagesValidator
)


class {{ cookiecutter.package_name|capitalize }}(BaseProcess):
    def __init__(self):
        super().__init__(
            file_loaders=(("lung", SimpleITKLoader()),
                          ("nodules", CSVLoader())),
            validators=(
                UniquePathIndicesValidator(),
                UniqueImagesValidator(),
                ExpectedColumnNamesValidator(("seriesuid", "coordX", "coordY", "coordZ")),
            ),
        )

   def process_case(self, *, idx, case):
        lung_path = case["path"]

        are_nodules_for_case = self._nodules["seriesuid"] == lung_path.name
        nodules = self._cases["nodules"][0][are_nodules_for_case]

        # Load the images and annotations for this case
        lung = self._file_loaders["lung"].load_image(lung_path)

        # Check that they're the expected images and annotations
        assert self._file_loaders["lung"].hash_image(lung) == case["hash"]

        lung = SimpleITK.GetArrayFromImage(lung)

        scored_nodules = predict(lung, nodules)

        self._scored_nodules = self._scored_nodules + scored_nodules

        return {
            'scored_nodules': scored_nodules,
            'lung_fname': lung_path.name,
            'nodules_fname': self._nodules_path.name,
        }

    def predict(lung_image, nodules_locations):
        scores = []
        for nodule in nodules_locations:
             scores.append(0.5)
        nodules_locations["class"] = scores
        return nodules_locations


if __name__ == "__main__":
    {{ cookiecutter.package_name|capitalize }}().evaluate()
